
firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000026  00800100  00000b50  00000be4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b50  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000032  00800126  00800126  00000c0a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c0a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c3c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000160  00000000  00000000  00000c7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c2b  00000000  00000000  00000ddc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bdf  00000000  00000000  00002a07  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ed7  00000000  00000000  000035e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000404  00000000  00000000  000044c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000741  00000000  00000000  000048c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000117f  00000000  00000000  00005005  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000158  00000000  00000000  00006184  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 39 00 	jmp	0x72	; 0x72 <__ctors_end>
   4:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
   8:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
   c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  10:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  14:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  18:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  1c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  20:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  24:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__vector_9>
  28:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  2c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  30:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  34:	0c 94 f7 02 	jmp	0x5ee	; 0x5ee <__vector_13>
  38:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  3c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  40:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  44:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  48:	0c 94 37 04 	jmp	0x86e	; 0x86e <__vector_18>
  4c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  50:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  54:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  58:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  5c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  60:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  64:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	3f 06       	cpc	r3, r31
  6a:	5b 4f       	sbci	r21, 0xFB	; 251
  6c:	66 6d       	ori	r22, 0xD6	; 214
  6e:	7d 07       	cpc	r23, r29
  70:	7f 6f       	ori	r23, 0xFF	; 255

00000072 <__ctors_end>:
  72:	11 24       	eor	r1, r1
  74:	1f be       	out	0x3f, r1	; 63
  76:	cf ef       	ldi	r28, 0xFF	; 255
  78:	d8 e0       	ldi	r29, 0x08	; 8
  7a:	de bf       	out	0x3e, r29	; 62
  7c:	cd bf       	out	0x3d, r28	; 61

0000007e <__do_copy_data>:
  7e:	11 e0       	ldi	r17, 0x01	; 1
  80:	a0 e0       	ldi	r26, 0x00	; 0
  82:	b1 e0       	ldi	r27, 0x01	; 1
  84:	e0 e5       	ldi	r30, 0x50	; 80
  86:	fb e0       	ldi	r31, 0x0B	; 11
  88:	02 c0       	rjmp	.+4      	; 0x8e <__do_copy_data+0x10>
  8a:	05 90       	lpm	r0, Z+
  8c:	0d 92       	st	X+, r0
  8e:	a6 32       	cpi	r26, 0x26	; 38
  90:	b1 07       	cpc	r27, r17
  92:	d9 f7       	brne	.-10     	; 0x8a <__do_copy_data+0xc>

00000094 <__do_clear_bss>:
  94:	21 e0       	ldi	r18, 0x01	; 1
  96:	a6 e2       	ldi	r26, 0x26	; 38
  98:	b1 e0       	ldi	r27, 0x01	; 1
  9a:	01 c0       	rjmp	.+2      	; 0x9e <.do_clear_bss_start>

0000009c <.do_clear_bss_loop>:
  9c:	1d 92       	st	X+, r1

0000009e <.do_clear_bss_start>:
  9e:	a8 35       	cpi	r26, 0x58	; 88
  a0:	b2 07       	cpc	r27, r18
  a2:	e1 f7       	brne	.-8      	; 0x9c <.do_clear_bss_loop>
  a4:	0e 94 3d 02 	call	0x47a	; 0x47a <main>
  a8:	0c 94 a6 05 	jmp	0xb4c	; 0xb4c <_exit>

000000ac <__bad_interrupt>:
  ac:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b0 <set_time_on_lcd>:
}

//==============================
void stop_clock(){
	TCNT1 = 63536;
	TCCR1B = 0b00000000;
  b0:	8f 92       	push	r8
  b2:	9f 92       	push	r9
  b4:	af 92       	push	r10
  b6:	bf 92       	push	r11
  b8:	ef 92       	push	r14
  ba:	ff 92       	push	r15
  bc:	0f 93       	push	r16
  be:	1f 93       	push	r17
  c0:	cf 93       	push	r28
  c2:	df 93       	push	r29
  c4:	00 d0       	rcall	.+0      	; 0xc6 <set_time_on_lcd+0x16>
  c6:	1f 92       	push	r1
  c8:	cd b7       	in	r28, 0x3d	; 61
  ca:	de b7       	in	r29, 0x3e	; 62
  cc:	4b 01       	movw	r8, r22
  ce:	5c 01       	movw	r10, r24
  d0:	7b 01       	movw	r14, r22
  d2:	85 01       	movw	r16, r10
  d4:	4a e0       	ldi	r20, 0x0A	; 10
  d6:	6e e4       	ldi	r22, 0x4E	; 78
  d8:	71 e0       	ldi	r23, 0x01	; 1
  da:	c4 01       	movw	r24, r8
  dc:	0e 94 81 05 	call	0xb02	; 0xb02 <__itoa_ncheck>
  e0:	ee e4       	ldi	r30, 0x4E	; 78
  e2:	f1 e0       	ldi	r31, 0x01	; 1
  e4:	01 90       	ld	r0, Z+
  e6:	00 20       	and	r0, r0
  e8:	e9 f7       	brne	.-6      	; 0xe4 <set_time_on_lcd+0x34>
  ea:	31 97       	sbiw	r30, 0x01	; 1
  ec:	8a e3       	ldi	r24, 0x3A	; 58
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	91 83       	std	Z+1, r25	; 0x01
  f2:	80 83       	st	Z, r24
  f4:	4a e0       	ldi	r20, 0x0A	; 10
  f6:	be 01       	movw	r22, r28
  f8:	6f 5f       	subi	r22, 0xFF	; 255
  fa:	7f 4f       	sbci	r23, 0xFF	; 255
  fc:	c5 01       	movw	r24, r10
  fe:	0e 94 81 05 	call	0xb02	; 0xb02 <__itoa_ncheck>
 102:	be 01       	movw	r22, r28
 104:	6f 5f       	subi	r22, 0xFF	; 255
 106:	7f 4f       	sbci	r23, 0xFF	; 255
 108:	8e e4       	ldi	r24, 0x4E	; 78
 10a:	91 e0       	ldi	r25, 0x01	; 1
 10c:	0e 94 66 05 	call	0xacc	; 0xacc <strcat>
 110:	0f 2e       	mov	r0, r31
 112:	fa e0       	ldi	r31, 0x0A	; 10
 114:	af 2e       	mov	r10, r31
 116:	b1 2c       	mov	r11, r1
 118:	f0 2d       	mov	r31, r0
 11a:	c7 01       	movw	r24, r14
 11c:	b5 01       	movw	r22, r10
 11e:	0e 94 52 05 	call	0xaa4	; 0xaa4 <__divmodhi4>
 122:	f8 2e       	mov	r15, r24
 124:	80 e0       	ldi	r24, 0x00	; 0
 126:	0e 94 1e 05 	call	0xa3c	; 0xa3c <TM1637_display_digit>
 12a:	6f 2d       	mov	r22, r15
 12c:	81 e0       	ldi	r24, 0x01	; 1
 12e:	0e 94 1e 05 	call	0xa3c	; 0xa3c <TM1637_display_digit>
 132:	c8 01       	movw	r24, r16
 134:	b5 01       	movw	r22, r10
 136:	0e 94 52 05 	call	0xaa4	; 0xaa4 <__divmodhi4>
 13a:	18 2f       	mov	r17, r24
 13c:	82 e0       	ldi	r24, 0x02	; 2
 13e:	0e 94 1e 05 	call	0xa3c	; 0xa3c <TM1637_display_digit>
 142:	61 2f       	mov	r22, r17
 144:	83 e0       	ldi	r24, 0x03	; 3
 146:	0e 94 1e 05 	call	0xa3c	; 0xa3c <TM1637_display_digit>
 14a:	0f 90       	pop	r0
 14c:	0f 90       	pop	r0
 14e:	0f 90       	pop	r0
 150:	df 91       	pop	r29
 152:	cf 91       	pop	r28
 154:	1f 91       	pop	r17
 156:	0f 91       	pop	r16
 158:	ff 90       	pop	r15
 15a:	ef 90       	pop	r14
 15c:	bf 90       	pop	r11
 15e:	af 90       	pop	r10
 160:	9f 90       	pop	r9
 162:	8f 90       	pop	r8
 164:	08 95       	ret

00000166 <read_buttons>:
 166:	30 99       	sbic	0x06, 0	; 6
 168:	0c c0       	rjmp	.+24     	; 0x182 <read_buttons+0x1c>
 16a:	2f ef       	ldi	r18, 0xFF	; 255
 16c:	84 e3       	ldi	r24, 0x34	; 52
 16e:	9c e0       	ldi	r25, 0x0C	; 12
 170:	21 50       	subi	r18, 0x01	; 1
 172:	80 40       	sbci	r24, 0x00	; 0
 174:	90 40       	sbci	r25, 0x00	; 0
 176:	e1 f7       	brne	.-8      	; 0x170 <read_buttons+0xa>
 178:	00 c0       	rjmp	.+0      	; 0x17a <read_buttons+0x14>
 17a:	00 00       	nop
 17c:	81 e0       	ldi	r24, 0x01	; 1
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	08 95       	ret
 182:	31 99       	sbic	0x06, 1	; 6
 184:	0c c0       	rjmp	.+24     	; 0x19e <read_buttons+0x38>
 186:	2f ef       	ldi	r18, 0xFF	; 255
 188:	84 e3       	ldi	r24, 0x34	; 52
 18a:	9c e0       	ldi	r25, 0x0C	; 12
 18c:	21 50       	subi	r18, 0x01	; 1
 18e:	80 40       	sbci	r24, 0x00	; 0
 190:	90 40       	sbci	r25, 0x00	; 0
 192:	e1 f7       	brne	.-8      	; 0x18c <read_buttons+0x26>
 194:	00 c0       	rjmp	.+0      	; 0x196 <read_buttons+0x30>
 196:	00 00       	nop
 198:	82 e0       	ldi	r24, 0x02	; 2
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	08 95       	ret
 19e:	32 99       	sbic	0x06, 2	; 6
 1a0:	0c c0       	rjmp	.+24     	; 0x1ba <read_buttons+0x54>
 1a2:	2f ef       	ldi	r18, 0xFF	; 255
 1a4:	84 e3       	ldi	r24, 0x34	; 52
 1a6:	9c e0       	ldi	r25, 0x0C	; 12
 1a8:	21 50       	subi	r18, 0x01	; 1
 1aa:	80 40       	sbci	r24, 0x00	; 0
 1ac:	90 40       	sbci	r25, 0x00	; 0
 1ae:	e1 f7       	brne	.-8      	; 0x1a8 <read_buttons+0x42>
 1b0:	00 c0       	rjmp	.+0      	; 0x1b2 <read_buttons+0x4c>
 1b2:	00 00       	nop
 1b4:	83 e0       	ldi	r24, 0x03	; 3
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	08 95       	ret
 1ba:	80 e0       	ldi	r24, 0x00	; 0
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	08 95       	ret

000001c0 <start_clock>:
 1c0:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
 1c4:	81 e0       	ldi	r24, 0x01	; 1
 1c6:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
 1ca:	80 e3       	ldi	r24, 0x30	; 48
 1cc:	98 ef       	ldi	r25, 0xF8	; 248
 1ce:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
 1d2:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
 1d6:	82 e0       	ldi	r24, 0x02	; 2
 1d8:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
 1dc:	08 95       	ret

000001de <read_timer_value>:
	
	//serial_writeln("Reading Jumper...");
	
	int temp;
	
	if (  !(PINB & (1 << PINB2))  ){
 1de:	1a 99       	sbic	0x03, 2	; 3
 1e0:	07 c0       	rjmp	.+14     	; 0x1f0 <read_timer_value+0x12>
		temp = 0;
		//serial_writeln("Jumper 5");
		return timers[temp][index-1];
 1e2:	88 0f       	add	r24, r24
 1e4:	99 1f       	adc	r25, r25
 1e6:	fc 01       	movw	r30, r24
 1e8:	ec 5f       	subi	r30, 0xFC	; 252
 1ea:	fe 4f       	sbci	r31, 0xFE	; 254
 1ec:	80 81       	ld	r24, Z
 1ee:	08 95       	ret
	}
	if (  !(PINB & (1 << PINB1))  ){
 1f0:	19 99       	sbic	0x03, 1	; 3
 1f2:	07 c0       	rjmp	.+14     	; 0x202 <read_timer_value+0x24>
		temp = 1;
		//serial_writeln("Jumper 10");
		return timers[temp][index-1];
 1f4:	88 0f       	add	r24, r24
 1f6:	99 1f       	adc	r25, r25
 1f8:	fc 01       	movw	r30, r24
 1fa:	e6 5f       	subi	r30, 0xF6	; 246
 1fc:	fe 4f       	sbci	r31, 0xFE	; 254
 1fe:	80 81       	ld	r24, Z
 200:	08 95       	ret
	}
	if (!(PINB & (1 << PINB0))){
 202:	18 99       	sbic	0x03, 0	; 3
 204:	07 c0       	rjmp	.+14     	; 0x214 <read_timer_value+0x36>
		temp = 2;
		//serial_writeln("Jumper 15");
		return timers[temp][index-1];
 206:	88 0f       	add	r24, r24
 208:	99 1f       	adc	r25, r25
 20a:	fc 01       	movw	r30, r24
 20c:	e0 5f       	subi	r30, 0xF0	; 240
 20e:	fe 4f       	sbci	r31, 0xFE	; 254
 210:	80 81       	ld	r24, Z
 212:	08 95       	ret
	}
	if (!(PIND & (1 << PIND7))){
 214:	4f 99       	sbic	0x09, 7	; 9
 216:	07 c0       	rjmp	.+14     	; 0x226 <read_timer_value+0x48>
		temp = 3;
		//serial_writeln("Jumper 20");
		return timers[temp][index-1];
 218:	88 0f       	add	r24, r24
 21a:	99 1f       	adc	r25, r25
 21c:	fc 01       	movw	r30, r24
 21e:	ea 5e       	subi	r30, 0xEA	; 234
 220:	fe 4f       	sbci	r31, 0xFE	; 254
 222:	80 81       	ld	r24, Z
 224:	08 95       	ret
	}
	if (!(PIND & (1 << PIND6))){
 226:	4e 99       	sbic	0x09, 6	; 9
 228:	07 c0       	rjmp	.+14     	; 0x238 <read_timer_value+0x5a>
		temp = 4;
		//serial_writeln("Jumper 25");
		return timers[temp][index-1];
 22a:	88 0f       	add	r24, r24
 22c:	99 1f       	adc	r25, r25
 22e:	fc 01       	movw	r30, r24
 230:	e4 5e       	subi	r30, 0xE4	; 228
 232:	fe 4f       	sbci	r31, 0xFE	; 254
 234:	80 81       	ld	r24, Z
 236:	08 95       	ret
	
	
	//default case...
	//serial_writeln("Default case:");
	//serial_writeln("Jumper 5");
	return timers[0][index-1];
 238:	88 0f       	add	r24, r24
 23a:	99 1f       	adc	r25, r25
 23c:	fc 01       	movw	r30, r24
 23e:	ec 5f       	subi	r30, 0xFC	; 252
 240:	fe 4f       	sbci	r31, 0xFE	; 254
 242:	80 81       	ld	r24, Z
}
 244:	08 95       	ret

00000246 <set_output>:


//=============================================
void set_output(char val){
	
	if (val == 0){
 246:	81 11       	cpse	r24, r1
 248:	03 c0       	rjmp	.+6      	; 0x250 <set_output+0xa>
		PORTB &= !(1<<5);
 24a:	85 b1       	in	r24, 0x05	; 5
 24c:	15 b8       	out	0x05, r1	; 5
 24e:	08 95       	ret
		//serial_writeln("UV LAMP OFF..");
	}
	if (val == 1){
 250:	81 30       	cpi	r24, 0x01	; 1
 252:	09 f4       	brne	.+2      	; 0x256 <set_output+0x10>
		//serial_writeln("UV LAMP ON..");
		PORTB |= (1<<5);
 254:	2d 9a       	sbi	0x05, 5	; 5
 256:	08 95       	ret

00000258 <set_button_led>:
}

//============================================
void set_button_led(char index,char state){
	
	switch(index){
 258:	82 30       	cpi	r24, 0x02	; 2
 25a:	51 f0       	breq	.+20     	; 0x270 <set_button_led+0x18>
 25c:	83 30       	cpi	r24, 0x03	; 3
 25e:	71 f0       	breq	.+28     	; 0x27c <set_button_led+0x24>
 260:	81 30       	cpi	r24, 0x01	; 1
 262:	89 f4       	brne	.+34     	; 0x286 <set_button_led+0x2e>
		
		case 1:
			if(state == 1){
 264:	61 30       	cpi	r22, 0x01	; 1
 266:	11 f4       	brne	.+4      	; 0x26c <set_button_led+0x14>
				PORTC |= 0b00001000;
 268:	43 9a       	sbi	0x08, 3	; 8
 26a:	08 95       	ret
				
			}
			else{
				PORTC &= 0b11110111;
 26c:	43 98       	cbi	0x08, 3	; 8
 26e:	08 95       	ret
			}
			break;
		
		case 2:
		   if(state == 1){
 270:	61 30       	cpi	r22, 0x01	; 1
 272:	11 f4       	brne	.+4      	; 0x278 <set_button_led+0x20>
			   PORTC |= 0b00010000;
 274:	44 9a       	sbi	0x08, 4	; 8
 276:	08 95       	ret
			   
		   }
		   else{
			   PORTC &= 0b11101111;
 278:	44 98       	cbi	0x08, 4	; 8
 27a:	08 95       	ret
			   
		   }
		   break;
		 case 3: 
		  if(state == 1){
 27c:	61 30       	cpi	r22, 0x01	; 1
 27e:	11 f4       	brne	.+4      	; 0x284 <set_button_led+0x2c>
			  PORTC |= 0b00100000;
 280:	45 9a       	sbi	0x08, 5	; 8
 282:	08 95       	ret
		  }
		  else{
			  PORTC &= 0b11011111;
 284:	45 98       	cbi	0x08, 5	; 8
 286:	08 95       	ret

00000288 <start_timer2>:

//===============================================================


void start_timer2(){
	TCCR2A = 0x00;
 288:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
	TCCR2B = 0x04;
 28c:	84 e0       	ldi	r24, 0x04	; 4
 28e:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
	TIMSK2 = 0x01;
 292:	81 e0       	ldi	r24, 0x01	; 1
 294:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__DATA_REGION_ORIGIN__+0x10>
	TCNT2 = 255-249;
 298:	86 e0       	ldi	r24, 0x06	; 6
 29a:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <__DATA_REGION_ORIGIN__+0x52>
 29e:	08 95       	ret

000002a0 <stop_timer2>:

//================================================================


void stop_timer2(){
	TCCR2A = 0x00;
 2a0:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
	TCCR2B = 0x00;
 2a4:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
	TIMSK2 = 0x01;
 2a8:	81 e0       	ldi	r24, 0x01	; 1
 2aa:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__DATA_REGION_ORIGIN__+0x10>
	TCNT2 = 255-249;
 2ae:	86 e0       	ldi	r24, 0x06	; 6
 2b0:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <__DATA_REGION_ORIGIN__+0x52>
 2b4:	08 95       	ret

000002b6 <set_buzzer>:

//-----------------------------------------------------------------

void set_buzzer(char st){
	
	if (st ==1){
 2b6:	81 30       	cpi	r24, 0x01	; 1
 2b8:	11 f4       	brne	.+4      	; 0x2be <set_buzzer+0x8>
		PORTB |= (1<<4);
 2ba:	2c 9a       	sbi	0x05, 4	; 5
 2bc:	08 95       	ret
		
	}
	if (st == 0){
 2be:	81 11       	cpse	r24, r1
 2c0:	02 c0       	rjmp	.+4      	; 0x2c6 <set_buzzer+0x10>
		PORTB &= !(1<<4);
 2c2:	85 b1       	in	r24, 0x05	; 5
 2c4:	15 b8       	out	0x05, r1	; 5
 2c6:	08 95       	ret

000002c8 <update_high_time>:
void update_high_time(){
	
	//taking high time as a function of HOW MUCH time is remaining till the buzzer start....
	// time remaining = total_wait time => Duty cycle = 10% = 100ms
	// time remaining  < 3 secs... duty cycle = 100% = 1000ms
	high_time = 100 + (int)(900/(total_wait_time-3))*(total_wait_time - remaining_time);
 2c8:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 2cc:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 2d0:	b9 01       	movw	r22, r18
 2d2:	63 50       	subi	r22, 0x03	; 3
 2d4:	71 09       	sbc	r23, r1
 2d6:	84 e8       	ldi	r24, 0x84	; 132
 2d8:	93 e0       	ldi	r25, 0x03	; 3
 2da:	0e 94 3e 05 	call	0xa7c	; 0xa7c <__udivmodhi4>
 2de:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <remaining_time>
 2e2:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <remaining_time+0x1>
 2e6:	28 1b       	sub	r18, r24
 2e8:	39 0b       	sbc	r19, r25
 2ea:	62 9f       	mul	r22, r18
 2ec:	c0 01       	movw	r24, r0
 2ee:	63 9f       	mul	r22, r19
 2f0:	90 0d       	add	r25, r0
 2f2:	72 9f       	mul	r23, r18
 2f4:	90 0d       	add	r25, r0
 2f6:	11 24       	eor	r1, r1
 2f8:	8c 59       	subi	r24, 0x9C	; 156
 2fa:	9f 4f       	sbci	r25, 0xFF	; 255
	
	if(high_time > 1000){
 2fc:	89 3e       	cpi	r24, 0xE9	; 233
 2fe:	23 e0       	ldi	r18, 0x03	; 3
 300:	92 07       	cpc	r25, r18
 302:	28 f4       	brcc	.+10     	; 0x30e <update_high_time+0x46>
void update_high_time(){
	
	//taking high time as a function of HOW MUCH time is remaining till the buzzer start....
	// time remaining = total_wait time => Duty cycle = 10% = 100ms
	// time remaining  < 3 secs... duty cycle = 100% = 1000ms
	high_time = 100 + (int)(900/(total_wait_time-3))*(total_wait_time - remaining_time);
 304:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <high_time+0x1>
 308:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <high_time>
 30c:	08 95       	ret
	
	if(high_time > 1000){
		high_time = 1000;
 30e:	88 ee       	ldi	r24, 0xE8	; 232
 310:	93 e0       	ldi	r25, 0x03	; 3
 312:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <high_time+0x1>
 316:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <high_time>
 31a:	08 95       	ret

0000031c <__vector_9>:
		PORTB &= !(1<<4);
	}
}

//--------------------------------------------------interrupt for timer2
ISR (TIMER2_OVF_vect){
 31c:	1f 92       	push	r1
 31e:	0f 92       	push	r0
 320:	0f b6       	in	r0, 0x3f	; 63
 322:	0f 92       	push	r0
 324:	11 24       	eor	r1, r1
 326:	2f 93       	push	r18
 328:	3f 93       	push	r19
 32a:	4f 93       	push	r20
 32c:	5f 93       	push	r21
 32e:	6f 93       	push	r22
 330:	7f 93       	push	r23
 332:	8f 93       	push	r24
 334:	9f 93       	push	r25
 336:	af 93       	push	r26
 338:	bf 93       	push	r27
 33a:	ef 93       	push	r30
 33c:	ff 93       	push	r31
	
	ms++;
 33e:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <ms>
 342:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <ms+0x1>
 346:	01 96       	adiw	r24, 0x01	; 1
 348:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <ms+0x1>
 34c:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <ms>
	time_passed++;
 350:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <time_passed>
 354:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <time_passed+0x1>
 358:	01 96       	adiw	r24, 0x01	; 1
 35a:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <time_passed+0x1>
 35e:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <time_passed>
	
	//setting on the BUZZER and th button LED for the HIGH time value..
	if(time_passed == high_time){
 362:	20 91 32 01 	lds	r18, 0x0132	; 0x800132 <high_time>
 366:	30 91 33 01 	lds	r19, 0x0133	; 0x800133 <high_time+0x1>
 36a:	82 17       	cp	r24, r18
 36c:	93 07       	cpc	r25, r19
 36e:	81 f4       	brne	.+32     	; 0x390 <__vector_9+0x74>
		time_passed = 0;
 370:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <time_passed+0x1>
 374:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <time_passed>
		set_buzzer(0);
 378:	80 e0       	ldi	r24, 0x00	; 0
 37a:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <set_buzzer>
		
		if(waiting == 1){
 37e:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <waiting>
 382:	81 30       	cpi	r24, 0x01	; 1
 384:	99 f5       	brne	.+102    	; 0x3ec <__vector_9+0xd0>
			set_button_led(current_running_timer,0);
 386:	60 e0       	ldi	r22, 0x00	; 0
 388:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <current_running_timer>
 38c:	0e 94 2c 01 	call	0x258	; 0x258 <set_button_led>
		}
		
	}
	
	//UNit second passed..
	if(ms == T){
 390:	20 91 2e 01 	lds	r18, 0x012E	; 0x80012e <ms>
 394:	30 91 2f 01 	lds	r19, 0x012F	; 0x80012f <ms+0x1>
 398:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <T>
 39c:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <T+0x1>
 3a0:	28 17       	cp	r18, r24
 3a2:	39 07       	cpc	r19, r25
 3a4:	f9 f4       	brne	.+62     	; 0x3e4 <__vector_9+0xc8>
		////serial_writeln("Second passed...");
		
		//setting on the BUZZER and LED button
		if(waiting == 1){
 3a6:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <waiting>
 3aa:	81 30       	cpi	r24, 0x01	; 1
 3ac:	29 f4       	brne	.+10     	; 0x3b8 <__vector_9+0x9c>
			set_button_led(current_running_timer,1);
 3ae:	61 e0       	ldi	r22, 0x01	; 1
 3b0:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <current_running_timer>
 3b4:	0e 94 2c 01 	call	0x258	; 0x258 <set_button_led>
		}
		set_buzzer(1);
 3b8:	81 e0       	ldi	r24, 0x01	; 1
 3ba:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <set_buzzer>
		
		
		time_passed = 0;
 3be:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <time_passed+0x1>
 3c2:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <time_passed>
		
		//decrementing remaining time secs..
		remaining_time--;
 3c6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <remaining_time>
 3ca:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <remaining_time+0x1>
 3ce:	01 97       	sbiw	r24, 0x01	; 1
 3d0:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <remaining_time+0x1>
 3d4:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <remaining_time>
		
		//updating the duty cycle..
		update_high_time();
 3d8:	0e 94 64 01 	call	0x2c8	; 0x2c8 <update_high_time>
		
		ms = 0;
 3dc:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <ms+0x1>
 3e0:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <ms>
	}
	
	
	TCNT2 = 255-249;
 3e4:	86 e0       	ldi	r24, 0x06	; 6
 3e6:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <__DATA_REGION_ORIGIN__+0x52>
}
 3ea:	0c c0       	rjmp	.+24     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
		}
		
	}
	
	//UNit second passed..
	if(ms == T){
 3ec:	20 91 2e 01 	lds	r18, 0x012E	; 0x80012e <ms>
 3f0:	30 91 2f 01 	lds	r19, 0x012F	; 0x80012f <ms+0x1>
 3f4:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <T>
 3f8:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <T+0x1>
 3fc:	28 17       	cp	r18, r24
 3fe:	39 07       	cpc	r19, r25
 400:	89 f7       	brne	.-30     	; 0x3e4 <__vector_9+0xc8>
 402:	da cf       	rjmp	.-76     	; 0x3b8 <__vector_9+0x9c>
		ms = 0;
	}
	
	
	TCNT2 = 255-249;
}
 404:	ff 91       	pop	r31
 406:	ef 91       	pop	r30
 408:	bf 91       	pop	r27
 40a:	af 91       	pop	r26
 40c:	9f 91       	pop	r25
 40e:	8f 91       	pop	r24
 410:	7f 91       	pop	r23
 412:	6f 91       	pop	r22
 414:	5f 91       	pop	r21
 416:	4f 91       	pop	r20
 418:	3f 91       	pop	r19
 41a:	2f 91       	pop	r18
 41c:	0f 90       	pop	r0
 41e:	0f be       	out	0x3f, r0	; 63
 420:	0f 90       	pop	r0
 422:	1f 90       	pop	r1
 424:	18 95       	reti

00000426 <read_radar>:
}

//-----------------------------------------------------------
char read_radar(){
	char radar_status = 0;
	if (PIND & (1<<5)){
 426:	89 b1       	in	r24, 0x09	; 9
	else{
		
		radar_status = 0;
		return radar_status ;
	}
}
 428:	85 fb       	bst	r24, 5
 42a:	88 27       	eor	r24, r24
 42c:	80 f9       	bld	r24, 0
 42e:	08 95       	ret

00000430 <pause_everything>:
//----------------------------------------------------------

void pause_everything(){
	TCCR1B = 0b00000000;
 430:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
	TCCR2B = 0b00000000;
 434:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>

set_output(0);
 438:	80 e0       	ldi	r24, 0x00	; 0
 43a:	0e 94 23 01 	call	0x246	; 0x246 <set_output>
set_buzzer(1);
 43e:	81 e0       	ldi	r24, 0x01	; 1
 440:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <set_buzzer>
 444:	08 95       	ret

00000446 <resume_everything>:

}
//-----------------------------------------------------------
void resume_everything(){
	TCCR1B = 0b00000010;
 446:	82 e0       	ldi	r24, 0x02	; 2
 448:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
	TCCR2B = 0b00000100;
 44c:	84 e0       	ldi	r24, 0x04	; 4
 44e:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
	set_output(1);
 452:	81 e0       	ldi	r24, 0x01	; 1
 454:	0e 94 23 01 	call	0x246	; 0x246 <set_output>
	set_buzzer(0);
 458:	80 e0       	ldi	r24, 0x00	; 0
 45a:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <set_buzzer>
	stop_timer2();
 45e:	0e 94 50 01 	call	0x2a0	; 0x2a0 <stop_timer2>
 462:	08 95       	ret

00000464 <InitADC>:
}
//------------------------------------------------------------
void InitADC()
{
	// Select Vref=AVcc
	ADMUX |= (1<<REFS0);
 464:	ec e7       	ldi	r30, 0x7C	; 124
 466:	f0 e0       	ldi	r31, 0x00	; 0
 468:	80 81       	ld	r24, Z
 46a:	80 64       	ori	r24, 0x40	; 64
 46c:	80 83       	st	Z, r24
	//set prescaller to 128 and enable ADC
	ADCSRA |= (1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0)|(1<<ADEN);
 46e:	ea e7       	ldi	r30, 0x7A	; 122
 470:	f0 e0       	ldi	r31, 0x00	; 0
 472:	80 81       	ld	r24, Z
 474:	87 68       	ori	r24, 0x87	; 135
 476:	80 83       	st	Z, r24
 478:	08 95       	ret

0000047a <main>:

int main(void)
{	
	
	//initiating ADC for A6 (PIR module)
	InitADC();
 47a:	0e 94 32 02 	call	0x464	; 0x464 <InitADC>
	
	DDRD = 0b00011110;
 47e:	8e e1       	ldi	r24, 0x1E	; 30
 480:	8a b9       	out	0x0a, r24	; 10
	PORTD |= 0b11000000;
 482:	8b b1       	in	r24, 0x0b	; 11
 484:	80 6c       	ori	r24, 0xC0	; 192
 486:	8b b9       	out	0x0b, r24	; 11
	DDRB = 0b00110000;
 488:	80 e3       	ldi	r24, 0x30	; 48
 48a:	84 b9       	out	0x04, r24	; 4
	PORTB |= 0b00000000;
 48c:	85 b1       	in	r24, 0x05	; 5
 48e:	85 b9       	out	0x05, r24	; 5
	DDRC |= 0b00111000;
 490:	87 b1       	in	r24, 0x07	; 7
 492:	88 63       	ori	r24, 0x38	; 56
 494:	87 b9       	out	0x07, r24	; 7
	PORTC |= (0b00000111);
 496:	88 b1       	in	r24, 0x08	; 8
 498:	87 60       	ori	r24, 0x07	; 7
 49a:	88 b9       	out	0x08, r24	; 8
	PORTC &= 0b11000111;
 49c:	88 b1       	in	r24, 0x08	; 8
 49e:	87 7c       	andi	r24, 0xC7	; 199
 4a0:	88 b9       	out	0x08, r24	; 8
	
	uart_init(9600);
 4a2:	80 e8       	ldi	r24, 0x80	; 128
 4a4:	95 e2       	ldi	r25, 0x25	; 37
 4a6:	0e 94 32 05 	call	0xa64	; 0xa64 <uart_init>
	TM1637_init(1/*enable*/, 7/*brightness*/);
 4aa:	67 e0       	ldi	r22, 0x07	; 7
 4ac:	81 e0       	ldi	r24, 0x01	; 1
 4ae:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <TM1637_init>
	
	
	//serial_writeln("Booting...");
	
		//setting 00:00 TO the display..
		TM1637_display_digit(0,0);
 4b2:	60 e0       	ldi	r22, 0x00	; 0
 4b4:	80 e0       	ldi	r24, 0x00	; 0
 4b6:	0e 94 1e 05 	call	0xa3c	; 0xa3c <TM1637_display_digit>
		TM1637_display_digit(1,0);
 4ba:	60 e0       	ldi	r22, 0x00	; 0
 4bc:	81 e0       	ldi	r24, 0x01	; 1
 4be:	0e 94 1e 05 	call	0xa3c	; 0xa3c <TM1637_display_digit>
		TM1637_display_digit(2,0);
 4c2:	60 e0       	ldi	r22, 0x00	; 0
 4c4:	82 e0       	ldi	r24, 0x02	; 2
 4c6:	0e 94 1e 05 	call	0xa3c	; 0xa3c <TM1637_display_digit>
		TM1637_display_digit(3, 0);
 4ca:	60 e0       	ldi	r22, 0x00	; 0
 4cc:	83 e0       	ldi	r24, 0x03	; 3
 4ce:	0e 94 1e 05 	call	0xa3c	; 0xa3c <TM1637_display_digit>
		
	//enabling interrupts..	
	sei();
 4d2:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4d4:	2f ef       	ldi	r18, 0xFF	; 255
 4d6:	89 e6       	ldi	r24, 0x69	; 105
 4d8:	98 e1       	ldi	r25, 0x18	; 24
 4da:	21 50       	subi	r18, 0x01	; 1
 4dc:	80 40       	sbci	r24, 0x00	; 0
 4de:	90 40       	sbci	r25, 0x00	; 0
 4e0:	e1 f7       	brne	.-8      	; 0x4da <main+0x60>
 4e2:	00 c0       	rjmp	.+0      	; 0x4e4 <main+0x6a>
 4e4:	00 00       	nop
	
	_delay_ms(500);
	////serial_writeln("Started....");
	//starting timer interrupt... 1ms duration
	start_clock();
 4e6:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <start_clock>
		
		//finding how much minns timer is needed.
		int mins = read_timer_value(status);
		
		//setting which timer is running..
		current_running_timer = status;
 4ea:	0f 2e       	mov	r0, r31
 4ec:	f8 e3       	ldi	r31, 0x38	; 56
 4ee:	af 2e       	mov	r10, r31
 4f0:	f1 e0       	ldi	r31, 0x01	; 1
 4f2:	bf 2e       	mov	r11, r31
 4f4:	f0 2d       	mov	r31, r0
		timer_done = 0;
		
		//starting waiting...
		waiting = 1;
 4f6:	ee 24       	eor	r14, r14
 4f8:	e3 94       	inc	r14
		
		//high time is 100ms out of 1000ms (10% dutycycle)
		high_time = 100;
 4fa:	0f 2e       	mov	r0, r31
 4fc:	f4 e6       	ldi	r31, 0x64	; 100
 4fe:	cf 2e       	mov	r12, r31
 500:	d1 2c       	mov	r13, r1
 502:	f0 2d       	mov	r31, r0
		
		//starting timer2 (for changing the timer period and state of buzzer after some set amount of time
		start_timer2();
		
		
		current_time.min = mins;
 504:	0a e2       	ldi	r16, 0x2A	; 42
 506:	11 e0       	ldi	r17, 0x01	; 1
		current_time.sec = 0;
		
		wait_time.min = 0;
 508:	c6 e2       	ldi	r28, 0x26	; 38
 50a:	d1 e0       	ldi	r29, 0x01	; 1
	while (1)
	{
	
		
		//if NOT running any timer and NOT waiting before starting the timer, then read the buttons..
	if(running == 0 && waiting == 0){
 50c:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <running>
 510:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <waiting>
 514:	81 11       	cpse	r24, r1
 516:	fe cf       	rjmp	.-4      	; 0x514 <main+0x9a>
 518:	91 11       	cpse	r25, r1
 51a:	fc cf       	rjmp	.-8      	; 0x514 <main+0x9a>
	status = read_buttons();
 51c:	0e 94 b3 00 	call	0x166	; 0x166 <read_buttons>
 520:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <status+0x1>
 524:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <status>
	
	if(bt_read != 0){
 528:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <bt_read>
 52c:	88 23       	and	r24, r24
 52e:	a1 f0       	breq	.+40     	; 0x558 <main+0xde>
		
		if (bt_read == '1' || bt_read == '2' || bt_read == '3'){
 530:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <bt_read>
 534:	81 33       	cpi	r24, 0x31	; 49
 536:	41 f0       	breq	.+16     	; 0x548 <main+0xce>
 538:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <bt_read>
 53c:	82 33       	cpi	r24, 0x32	; 50
 53e:	21 f0       	breq	.+8      	; 0x548 <main+0xce>
 540:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <bt_read>
 544:	83 33       	cpi	r24, 0x33	; 51
 546:	41 f4       	brne	.+16     	; 0x558 <main+0xde>
			status = bt_read-'0';
 548:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <bt_read>
 54c:	90 e0       	ldi	r25, 0x00	; 0
 54e:	c0 97       	sbiw	r24, 0x30	; 48
 550:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <status+0x1>
 554:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <status>
		}
	
		
	}
	if (status != 0 ){
 558:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <status>
 55c:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <status+0x1>
 560:	00 97       	sbiw	r24, 0x00	; 0
 562:	a1 f2       	breq	.-88     	; 0x50c <main+0x92>
		////serial_write("Button pressed: ");
		//serial_writeln(status);
		
		
		//finding how much minns timer is needed.
		int mins = read_timer_value(status);
 564:	0e 94 ef 00 	call	0x1de	; 0x1de <read_timer_value>
 568:	f8 2e       	mov	r15, r24
		
		//setting which timer is running..
		current_running_timer = status;
 56a:	f5 01       	movw	r30, r10
 56c:	80 81       	ld	r24, Z
 56e:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <current_running_timer>
		timer_done = 0;
 572:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <timer_done>
		
		//starting waiting...
		waiting = 1;
 576:	e0 92 35 01 	sts	0x0135, r14	; 0x800135 <waiting>
		
		//high time is 100ms out of 1000ms (10% dutycycle)
		high_time = 100;
 57a:	d0 92 33 01 	sts	0x0133, r13	; 0x800133 <high_time+0x1>
 57e:	c0 92 32 01 	sts	0x0132, r12	; 0x800132 <high_time>
		time_passed = 0;
 582:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <time_passed+0x1>
 586:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <time_passed>
		
		//starting timer2 (for changing the timer period and state of buzzer after some set amount of time
		start_timer2();
 58a:	0e 94 44 01 	call	0x288	; 0x288 <start_timer2>
		
		
		current_time.min = mins;
 58e:	8f 2d       	mov	r24, r15
 590:	90 e0       	ldi	r25, 0x00	; 0
 592:	f8 01       	movw	r30, r16
 594:	91 83       	std	Z+1, r25	; 0x01
 596:	80 83       	st	Z, r24
		current_time.sec = 0;
 598:	13 82       	std	Z+3, r1	; 0x03
 59a:	12 82       	std	Z+2, r1	; 0x02
		
		wait_time.min = 0;
 59c:	19 82       	std	Y+1, r1	; 0x01
 59e:	18 82       	st	Y, r1
		wait_time.sec = total_wait_time;
 5a0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 5a4:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 5a8:	9b 83       	std	Y+3, r25	; 0x03
 5aa:	8a 83       	std	Y+2, r24	; 0x02
		
		
		set_time_on_lcd(wait_time);
 5ac:	60 91 26 01 	lds	r22, 0x0126	; 0x800126 <__data_end>
 5b0:	70 91 27 01 	lds	r23, 0x0127	; 0x800127 <__data_end+0x1>
 5b4:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <__data_end+0x2>
 5b8:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <__data_end+0x3>
 5bc:	0e 94 58 00 	call	0xb0	; 0xb0 <set_time_on_lcd>
		start_clock();
 5c0:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <start_clock>
 5c4:	a3 cf       	rjmp	.-186    	; 0x50c <main+0x92>

000005c6 <ReadADC>:
//----------------------------------------------------------

uint16_t ReadADC(uint8_t ADCchannel)
{
	//select ADC channel with safety mask
	ADMUX = (ADMUX & 0xF0) | (ADCchannel & 0x0F);
 5c6:	ec e7       	ldi	r30, 0x7C	; 124
 5c8:	f0 e0       	ldi	r31, 0x00	; 0
 5ca:	90 81       	ld	r25, Z
 5cc:	90 7f       	andi	r25, 0xF0	; 240
 5ce:	8f 70       	andi	r24, 0x0F	; 15
 5d0:	89 2b       	or	r24, r25
 5d2:	80 83       	st	Z, r24
	//single conversion mode
	ADCSRA |= (1<<ADSC);
 5d4:	ea e7       	ldi	r30, 0x7A	; 122
 5d6:	f0 e0       	ldi	r31, 0x00	; 0
 5d8:	80 81       	ld	r24, Z
 5da:	80 64       	ori	r24, 0x40	; 64
 5dc:	80 83       	st	Z, r24
	// wait until ADC conversion is complete
	while( ADCSRA & (1<<ADSC) );
 5de:	80 81       	ld	r24, Z
 5e0:	86 fd       	sbrc	r24, 6
 5e2:	fd cf       	rjmp	.-6      	; 0x5de <ReadADC+0x18>
	return ADC;
 5e4:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
 5e8:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
}
 5ec:	08 95       	ret

000005ee <__vector_13>:
	TCNT1 = 63536;
	TCCR1B = 0b00000000;
}

//=============================
ISR (TIMER1_OVF_vect){
 5ee:	1f 92       	push	r1
 5f0:	0f 92       	push	r0
 5f2:	0f b6       	in	r0, 0x3f	; 63
 5f4:	0f 92       	push	r0
 5f6:	11 24       	eor	r1, r1
 5f8:	0f 93       	push	r16
 5fa:	1f 93       	push	r17
 5fc:	2f 93       	push	r18
 5fe:	3f 93       	push	r19
 600:	4f 93       	push	r20
 602:	5f 93       	push	r21
 604:	6f 93       	push	r22
 606:	7f 93       	push	r23
 608:	8f 93       	push	r24
 60a:	9f 93       	push	r25
 60c:	af 93       	push	r26
 60e:	bf 93       	push	r27
 610:	cf 93       	push	r28
 612:	ef 93       	push	r30
 614:	ff 93       	push	r31
	
	//1ms timer interrupt..
	//counting millisecs.
	ms_count++;
 616:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <ms_count>
 61a:	90 91 3c 01 	lds	r25, 0x013C	; 0x80013c <ms_count+0x1>
 61e:	01 96       	adiw	r24, 0x01	; 1
 620:	90 93 3c 01 	sts	0x013C, r25	; 0x80013c <ms_count+0x1>
 624:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <ms_count>
	
	if (running == 1){
 628:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <running>
 62c:	81 30       	cpi	r24, 0x01	; 1
 62e:	09 f0       	breq	.+2      	; 0x632 <__vector_13+0x44>
 630:	44 c0       	rjmp	.+136    	; 0x6ba <__vector_13+0xcc>
		//if any TIMER is running,...
		
		//read radar status..
	char radar_val = read_radar();
 632:	0e 94 13 02 	call	0x426	; 0x426 <read_radar>
 636:	c8 2f       	mov	r28, r24
		//read PIR status..
	uint16_t adc_val = ReadADC(6);
 638:	86 e0       	ldi	r24, 0x06	; 6
 63a:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <ReadADC>
 63e:	8c 01       	movw	r16, r24
	
	//if RADAR is high or PIR is LOW..
	if(radar_val  == 1 || adc_val < 512){
 640:	c1 30       	cpi	r28, 0x01	; 1
 642:	19 f0       	breq	.+6      	; 0x64a <__vector_13+0x5c>
 644:	81 15       	cp	r24, r1
 646:	92 40       	sbci	r25, 0x02	; 2
 648:	c0 f5       	brcc	.+112    	; 0x6ba <__vector_13+0xcc>
		
		//PAUSE EVERYTHING..
		pause_everything();
 64a:	0e 94 18 02 	call	0x430	; 0x430 <pause_everything>
		
		
		//serial_writeln("Checking...");
		
		//WAIT UNTIL both of them go untriggered.
		while(radar_val!=0 || adc_val < 512){
 64e:	10 c0       	rjmp	.+32     	; 0x670 <__vector_13+0x82>
			//serial_writeln("stopped..");
			radar_val = read_radar();
 650:	0e 94 13 02 	call	0x426	; 0x426 <read_radar>
 654:	c8 2f       	mov	r28, r24
			adc_val = ReadADC(6);
 656:	86 e0       	ldi	r24, 0x06	; 6
 658:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <ReadADC>
 65c:	8c 01       	movw	r16, r24
 65e:	8f ef       	ldi	r24, 0xFF	; 255
 660:	90 e7       	ldi	r25, 0x70	; 112
 662:	22 e0       	ldi	r18, 0x02	; 2
 664:	81 50       	subi	r24, 0x01	; 1
 666:	90 40       	sbci	r25, 0x00	; 0
 668:	20 40       	sbci	r18, 0x00	; 0
 66a:	e1 f7       	brne	.-8      	; 0x664 <__vector_13+0x76>
 66c:	00 c0       	rjmp	.+0      	; 0x66e <__vector_13+0x80>
 66e:	00 00       	nop
		
		
		//serial_writeln("Checking...");
		
		//WAIT UNTIL both of them go untriggered.
		while(radar_val!=0 || adc_val < 512){
 670:	c1 11       	cpse	r28, r1
 672:	ee cf       	rjmp	.-36     	; 0x650 <__vector_13+0x62>
 674:	01 15       	cp	r16, r1
 676:	12 40       	sbci	r17, 0x02	; 2
 678:	58 f3       	brcs	.-42     	; 0x650 <__vector_13+0x62>
 67a:	c6 e1       	ldi	r28, 0x16	; 22
		}
		
		//now the person has moved out...
		/// beep the buzzer for 22 secs before continuing the UV light operation..
		for (char x = 0; x < 22 ; x++){
			set_buzzer(1);
 67c:	81 e0       	ldi	r24, 0x01	; 1
 67e:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <set_buzzer>
 682:	9f ef       	ldi	r25, 0xFF	; 255
 684:	2f e0       	ldi	r18, 0x0F	; 15
 686:	87 e2       	ldi	r24, 0x27	; 39
 688:	91 50       	subi	r25, 0x01	; 1
 68a:	20 40       	sbci	r18, 0x00	; 0
 68c:	80 40       	sbci	r24, 0x00	; 0
 68e:	e1 f7       	brne	.-8      	; 0x688 <__vector_13+0x9a>
 690:	00 c0       	rjmp	.+0      	; 0x692 <__vector_13+0xa4>
 692:	00 00       	nop
			_delay_ms(800);
			set_buzzer(0);
 694:	80 e0       	ldi	r24, 0x00	; 0
 696:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <set_buzzer>
 69a:	9f ef       	ldi	r25, 0xFF	; 255
 69c:	23 ec       	ldi	r18, 0xC3	; 195
 69e:	89 e0       	ldi	r24, 0x09	; 9
 6a0:	91 50       	subi	r25, 0x01	; 1
 6a2:	20 40       	sbci	r18, 0x00	; 0
 6a4:	80 40       	sbci	r24, 0x00	; 0
 6a6:	e1 f7       	brne	.-8      	; 0x6a0 <__vector_13+0xb2>
 6a8:	00 c0       	rjmp	.+0      	; 0x6aa <__vector_13+0xbc>
 6aa:	00 00       	nop
 6ac:	c1 50       	subi	r28, 0x01	; 1
			_delay_ms(50);
		}
		
		//now the person has moved out...
		/// beep the buzzer for 22 secs before continuing the UV light operation..
		for (char x = 0; x < 22 ; x++){
 6ae:	31 f7       	brne	.-52     	; 0x67c <__vector_13+0x8e>
			set_buzzer(0);
			_delay_ms(200);
		}
		
		//resuming everything and setting ON the uv lamp.
		resume_everything();
 6b0:	0e 94 23 02 	call	0x446	; 0x446 <resume_everything>
		set_output(1);
 6b4:	81 e0       	ldi	r24, 0x01	; 1
 6b6:	0e 94 23 01 	call	0x246	; 0x246 <set_output>
		
	}
	}
	
	//if ms = 1000, increment the Secs.
	if(ms_count == 1000){
 6ba:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <ms_count>
 6be:	90 91 3c 01 	lds	r25, 0x013C	; 0x80013c <ms_count+0x1>
 6c2:	88 3e       	cpi	r24, 0xE8	; 232
 6c4:	93 40       	sbci	r25, 0x03	; 3
 6c6:	09 f0       	breq	.+2      	; 0x6ca <__vector_13+0xdc>
 6c8:	b8 c0       	rjmp	.+368    	; 0x83a <__vector_13+0x24c>
		ms_count = 0;
 6ca:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <ms_count+0x1>
 6ce:	10 92 3b 01 	sts	0x013B, r1	; 0x80013b <ms_count>
		
		//if waiting??	
		if(waiting == 1){
 6d2:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <waiting>
 6d6:	81 30       	cpi	r24, 0x01	; 1
 6d8:	09 f0       	breq	.+2      	; 0x6dc <__vector_13+0xee>
 6da:	5c c0       	rjmp	.+184    	; 0x794 <__vector_13+0x1a6>
			wait_time.sec --;
 6dc:	e6 e2       	ldi	r30, 0x26	; 38
 6de:	f1 e0       	ldi	r31, 0x01	; 1
 6e0:	82 81       	ldd	r24, Z+2	; 0x02
 6e2:	93 81       	ldd	r25, Z+3	; 0x03
 6e4:	01 97       	sbiw	r24, 0x01	; 1
 6e6:	93 83       	std	Z+3, r25	; 0x03
 6e8:	82 83       	std	Z+2, r24	; 0x02
			
			
			if(wait_time.sec < 0){
 6ea:	99 23       	and	r25, r25
 6ec:	0c f0       	brlt	.+2      	; 0x6f0 <__vector_13+0x102>
 6ee:	48 c0       	rjmp	.+144    	; 0x780 <__vector_13+0x192>
				wait_time.sec =0;
 6f0:	13 82       	std	Z+3, r1	; 0x03
 6f2:	12 82       	std	Z+2, r1	; 0x02
				wait_time.min --;
 6f4:	80 81       	ld	r24, Z
 6f6:	91 81       	ldd	r25, Z+1	; 0x01
 6f8:	01 97       	sbiw	r24, 0x01	; 1
 6fa:	91 83       	std	Z+1, r25	; 0x01
 6fc:	80 83       	st	Z, r24
					
				//if we are done WAITING..
				if(wait_time.min<0){
 6fe:	99 23       	and	r25, r25
 700:	a4 f5       	brge	.+104    	; 0x76a <__vector_13+0x17c>
					
					
					wait_time.min = 0;
 702:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <__data_end+0x1>
 706:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <__data_end>
					wait_time.sec = 0;
					set_time_on_lcd(wait_time);
 70a:	60 91 26 01 	lds	r22, 0x0126	; 0x800126 <__data_end>
 70e:	70 91 27 01 	lds	r23, 0x0127	; 0x800127 <__data_end+0x1>
 712:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <__data_end+0x2>
 716:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <__data_end+0x3>
 71a:	0e 94 58 00 	call	0xb0	; 0xb0 <set_time_on_lcd>
 71e:	8f ef       	ldi	r24, 0xFF	; 255
 720:	95 ea       	ldi	r25, 0xA5	; 165
 722:	2e e0       	ldi	r18, 0x0E	; 14
 724:	81 50       	subi	r24, 0x01	; 1
 726:	90 40       	sbci	r25, 0x00	; 0
 728:	20 40       	sbci	r18, 0x00	; 0
 72a:	e1 f7       	brne	.-8      	; 0x724 <__vector_13+0x136>
 72c:	00 c0       	rjmp	.+0      	; 0x72e <__vector_13+0x140>
 72e:	00 00       	nop
					
					_delay_ms(300);
					//WRITING THE timer time on the LCD..
					set_time_on_lcd(current_time);
 730:	60 91 2a 01 	lds	r22, 0x012A	; 0x80012a <current_time>
 734:	70 91 2b 01 	lds	r23, 0x012B	; 0x80012b <current_time+0x1>
 738:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <current_time+0x2>
 73c:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <current_time+0x3>
 740:	0e 94 58 00 	call	0xb0	; 0xb0 <set_time_on_lcd>
					
					
					waiting = 0;
 744:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <waiting>
					
					//DONE WAiting, now RUNNING...
					running = 1;
 748:	81 e0       	ldi	r24, 0x01	; 1
 74a:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <running>
					
					//SETTING the corresponding timer button LED ON
					set_button_led(current_running_timer,1);
 74e:	61 e0       	ldi	r22, 0x01	; 1
 750:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <current_running_timer>
 754:	0e 94 2c 01 	call	0x258	; 0x258 <set_button_led>
					
					//stopping timer2 
					stop_timer2();
 758:	0e 94 50 01 	call	0x2a0	; 0x2a0 <stop_timer2>
					
					//turning OFF the buzzer
					set_buzzer(0);
 75c:	80 e0       	ldi	r24, 0x00	; 0
 75e:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <set_buzzer>
					
					//turning ON the UV lamp...
					set_output(1);
 762:	81 e0       	ldi	r24, 0x01	; 1
 764:	0e 94 23 01 	call	0x246	; 0x246 <set_output>
					
					return ;
 768:	6e c0       	rjmp	.+220    	; 0x846 <__vector_13+0x258>
					
				}
				else{
					set_time_on_lcd(wait_time);
 76a:	60 91 26 01 	lds	r22, 0x0126	; 0x800126 <__data_end>
 76e:	70 91 27 01 	lds	r23, 0x0127	; 0x800127 <__data_end+0x1>
 772:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <__data_end+0x2>
 776:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <__data_end+0x3>
 77a:	0e 94 58 00 	call	0xb0	; 0xb0 <set_time_on_lcd>
 77e:	0a c0       	rjmp	.+20     	; 0x794 <__vector_13+0x1a6>
				}
				
			}
			else{
				set_time_on_lcd(wait_time);
 780:	60 91 26 01 	lds	r22, 0x0126	; 0x800126 <__data_end>
 784:	70 91 27 01 	lds	r23, 0x0127	; 0x800127 <__data_end+0x1>
 788:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <__data_end+0x2>
 78c:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <__data_end+0x3>
 790:	0e 94 58 00 	call	0xb0	; 0xb0 <set_time_on_lcd>
			}
		}
		
		
		//if already running...
		if (running == 1){
 794:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <running>
 798:	81 30       	cpi	r24, 0x01	; 1
 79a:	09 f0       	breq	.+2      	; 0x79e <__vector_13+0x1b0>
 79c:	4e c0       	rjmp	.+156    	; 0x83a <__vector_13+0x24c>
			
			//decrement the run time...
			current_time.sec --;
 79e:	ea e2       	ldi	r30, 0x2A	; 42
 7a0:	f1 e0       	ldi	r31, 0x01	; 1
 7a2:	82 81       	ldd	r24, Z+2	; 0x02
 7a4:	93 81       	ldd	r25, Z+3	; 0x03
 7a6:	01 97       	sbiw	r24, 0x01	; 1
 7a8:	93 83       	std	Z+3, r25	; 0x03
 7aa:	82 83       	std	Z+2, r24	; 0x02
			
			if (current_time.sec<0){
 7ac:	99 23       	and	r25, r25
 7ae:	dc f5       	brge	.+118    	; 0x826 <__vector_13+0x238>
				current_time.min --;
 7b0:	80 81       	ld	r24, Z
 7b2:	91 81       	ldd	r25, Z+1	; 0x01
 7b4:	01 97       	sbiw	r24, 0x01	; 1
 7b6:	91 83       	std	Z+1, r25	; 0x01
 7b8:	80 83       	st	Z, r24
				current_time.sec = 59;
 7ba:	2b e3       	ldi	r18, 0x3B	; 59
 7bc:	30 e0       	ldi	r19, 0x00	; 0
 7be:	33 83       	std	Z+3, r19	; 0x03
 7c0:	22 83       	std	Z+2, r18	; 0x02
				
				if(current_time.min<0){
 7c2:	99 23       	and	r25, r25
 7c4:	2c f5       	brge	.+74     	; 0x810 <__vector_13+0x222>
					
					//means timer is done....
					current_time.min = 0;
 7c6:	11 82       	std	Z+1, r1	; 0x01
 7c8:	10 82       	st	Z, r1
					current_time.sec = 0;
 7ca:	13 82       	std	Z+3, r1	; 0x03
 7cc:	12 82       	std	Z+2, r1	; 0x02
					
					set_time_on_lcd(current_time);
 7ce:	60 91 2a 01 	lds	r22, 0x012A	; 0x80012a <current_time>
 7d2:	70 91 2b 01 	lds	r23, 0x012B	; 0x80012b <current_time+0x1>
 7d6:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <current_time+0x2>
 7da:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <current_time+0x3>
 7de:	0e 94 58 00 	call	0xb0	; 0xb0 <set_time_on_lcd>
					
					//setting off status, settting UV lamp OFF.
					running = 0;
 7e2:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <running>
					set_output(0);
 7e6:	80 e0       	ldi	r24, 0x00	; 0
 7e8:	0e 94 23 01 	call	0x246	; 0x246 <set_output>
					set_button_led(current_running_timer,0);
 7ec:	60 e0       	ldi	r22, 0x00	; 0
 7ee:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <current_running_timer>
 7f2:	0e 94 2c 01 	call	0x258	; 0x258 <set_button_led>
					high_time=0;
 7f6:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <high_time+0x1>
 7fa:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <high_time>
					
					//REMAINING watiting time (before starting any timer = total_Wait_time
					remaining_time =total_wait_time;
 7fe:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 802:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 806:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <remaining_time+0x1>
 80a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <remaining_time>
 80e:	15 c0       	rjmp	.+42     	; 0x83a <__vector_13+0x24c>
					
				}
				else{
					set_time_on_lcd(current_time);
 810:	60 91 2a 01 	lds	r22, 0x012A	; 0x80012a <current_time>
 814:	70 91 2b 01 	lds	r23, 0x012B	; 0x80012b <current_time+0x1>
 818:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <current_time+0x2>
 81c:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <current_time+0x3>
 820:	0e 94 58 00 	call	0xb0	; 0xb0 <set_time_on_lcd>
 824:	0a c0       	rjmp	.+20     	; 0x83a <__vector_13+0x24c>
				}
				
				
			}
			else{
				set_time_on_lcd(current_time);
 826:	60 91 2a 01 	lds	r22, 0x012A	; 0x80012a <current_time>
 82a:	70 91 2b 01 	lds	r23, 0x012B	; 0x80012b <current_time+0x1>
 82e:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <current_time+0x2>
 832:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <current_time+0x3>
 836:	0e 94 58 00 	call	0xb0	; 0xb0 <set_time_on_lcd>
			}
		}
		
		
	}
	TCNT1 = 63536;
 83a:	80 e3       	ldi	r24, 0x30	; 48
 83c:	98 ef       	ldi	r25, 0xF8	; 248
 83e:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
 842:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
}
 846:	ff 91       	pop	r31
 848:	ef 91       	pop	r30
 84a:	cf 91       	pop	r28
 84c:	bf 91       	pop	r27
 84e:	af 91       	pop	r26
 850:	9f 91       	pop	r25
 852:	8f 91       	pop	r24
 854:	7f 91       	pop	r23
 856:	6f 91       	pop	r22
 858:	5f 91       	pop	r21
 85a:	4f 91       	pop	r20
 85c:	3f 91       	pop	r19
 85e:	2f 91       	pop	r18
 860:	1f 91       	pop	r17
 862:	0f 91       	pop	r16
 864:	0f 90       	pop	r0
 866:	0f be       	out	0x3f, r0	; 63
 868:	0f 90       	pop	r0
 86a:	1f 90       	pop	r1
 86c:	18 95       	reti

0000086e <__vector_18>:
	while( ADCSRA & (1<<ADSC) );
	return ADC;
}


ISR (USART_RX_vect){
 86e:	1f 92       	push	r1
 870:	0f 92       	push	r0
 872:	0f b6       	in	r0, 0x3f	; 63
 874:	0f 92       	push	r0
 876:	11 24       	eor	r1, r1
 878:	2f 93       	push	r18
 87a:	3f 93       	push	r19
 87c:	4f 93       	push	r20
 87e:	5f 93       	push	r21
 880:	6f 93       	push	r22
 882:	7f 93       	push	r23
 884:	8f 93       	push	r24
 886:	9f 93       	push	r25
 888:	af 93       	push	r26
 88a:	bf 93       	push	r27
 88c:	cf 93       	push	r28
 88e:	ef 93       	push	r30
 890:	ff 93       	push	r31
	
	char ReceivedChar = UDR0;
 892:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
	
	if (ReceivedChar == '1' || ReceivedChar == '2' || ReceivedChar == '3'){
 896:	8f ec       	ldi	r24, 0xCF	; 207
 898:	8c 0f       	add	r24, r28
 89a:	83 30       	cpi	r24, 0x03	; 3
 89c:	78 f4       	brcc	.+30     	; 0x8bc <__vector_18+0x4e>
		PORTD ^= (0x04);
 89e:	9b b1       	in	r25, 0x0b	; 11
 8a0:	84 e0       	ldi	r24, 0x04	; 4
 8a2:	89 27       	eor	r24, r25
 8a4:	8b b9       	out	0x0b, r24	; 11
		
		if (! running && ! waiting){
 8a6:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <running>
 8aa:	81 11       	cpse	r24, r1
 8ac:	27 c0       	rjmp	.+78     	; 0x8fc <__vector_18+0x8e>
 8ae:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <waiting>
 8b2:	81 11       	cpse	r24, r1
 8b4:	1e c0       	rjmp	.+60     	; 0x8f2 <__vector_18+0x84>
		bt_read = ReceivedChar;
 8b6:	c0 93 3a 01 	sts	0x013A, r28	; 0x80013a <bt_read>
 8ba:	1b c0       	rjmp	.+54     	; 0x8f2 <__vector_18+0x84>
		}
	}
	
	if (ReceivedChar == 'S' || ReceivedChar == 's'){
 8bc:	8c 2f       	mov	r24, r28
 8be:	8f 7d       	andi	r24, 0xDF	; 223
 8c0:	83 35       	cpi	r24, 0x53	; 83
 8c2:	31 f4       	brne	.+12     	; 0x8d0 <__vector_18+0x62>
		
		if(running ){
 8c4:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <running>
 8c8:	88 23       	and	r24, r24
 8ca:	81 f0       	breq	.+32     	; 0x8ec <__vector_18+0x7e>
		pause_everything();
 8cc:	0e 94 18 02 	call	0x430	; 0x430 <pause_everything>
		}
		
		
	}
	if (ReceivedChar == 'C' || ReceivedChar == 'c'){
 8d0:	c3 34       	cpi	r28, 0x43	; 67
 8d2:	11 f0       	breq	.+4      	; 0x8d8 <__vector_18+0x6a>
 8d4:	c3 36       	cpi	r28, 0x63	; 99
 8d6:	b9 f4       	brne	.+46     	; 0x906 <__stack+0x7>
		
		if(running ){
 8d8:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <running>
 8dc:	88 23       	and	r24, r24
 8de:	99 f0       	breq	.+38     	; 0x906 <__stack+0x7>
			resume_everything();
 8e0:	0e 94 23 02 	call	0x446	; 0x446 <resume_everything>
			set_output(1);
 8e4:	81 e0       	ldi	r24, 0x01	; 1
 8e6:	0e 94 23 01 	call	0x246	; 0x246 <set_output>
		}
		
		
	}
}
 8ea:	0d c0       	rjmp	.+26     	; 0x906 <__stack+0x7>
		pause_everything();
		}
		
		
	}
	if (ReceivedChar == 'C' || ReceivedChar == 'c'){
 8ec:	c3 34       	cpi	r28, 0x43	; 67
 8ee:	91 f7       	brne	.-28     	; 0x8d4 <__vector_18+0x66>
 8f0:	0a c0       	rjmp	.+20     	; 0x906 <__stack+0x7>
		if (! running && ! waiting){
		bt_read = ReceivedChar;
		}
	}
	
	if (ReceivedChar == 'S' || ReceivedChar == 's'){
 8f2:	8c 2f       	mov	r24, r28
 8f4:	8f 7d       	andi	r24, 0xDF	; 223
 8f6:	83 35       	cpi	r24, 0x53	; 83
 8f8:	59 f7       	brne	.-42     	; 0x8d0 <__vector_18+0x62>
 8fa:	f8 cf       	rjmp	.-16     	; 0x8ec <__vector_18+0x7e>
 8fc:	8c 2f       	mov	r24, r28
 8fe:	8f 7d       	andi	r24, 0xDF	; 223
 900:	83 35       	cpi	r24, 0x53	; 83
 902:	31 f7       	brne	.-52     	; 0x8d0 <__vector_18+0x62>
 904:	e3 cf       	rjmp	.-58     	; 0x8cc <__vector_18+0x5e>
			set_output(1);
		}
		
		
	}
}
 906:	ff 91       	pop	r31
 908:	ef 91       	pop	r30
 90a:	cf 91       	pop	r28
 90c:	bf 91       	pop	r27
 90e:	af 91       	pop	r26
 910:	9f 91       	pop	r25
 912:	8f 91       	pop	r24
 914:	7f 91       	pop	r23
 916:	6f 91       	pop	r22
 918:	5f 91       	pop	r21
 91a:	4f 91       	pop	r20
 91c:	3f 91       	pop	r19
 91e:	2f 91       	pop	r18
 920:	0f 90       	pop	r0
 922:	0f be       	out	0x3f, r0	; 63
 924:	0f 90       	pop	r0
 926:	1f 90       	pop	r1
 928:	18 95       	reti

0000092a <TM1637_start>:
	uint8_t i;

	for (i = 0; i < TM1637_POSITION_MAX; ++i) {
		TM1637_display_segments(i, 0x00);
	}
}
 92a:	5c 9a       	sbi	0x0b, 4	; 11
 92c:	5b 9a       	sbi	0x0b, 3	; 11
 92e:	8a e1       	ldi	r24, 0x1A	; 26
 930:	8a 95       	dec	r24
 932:	f1 f7       	brne	.-4      	; 0x930 <TM1637_start+0x6>
 934:	00 c0       	rjmp	.+0      	; 0x936 <TM1637_start+0xc>
 936:	5c 98       	cbi	0x0b, 4	; 11
 938:	08 95       	ret

0000093a <TM1637_stop>:
 93a:	5b 98       	cbi	0x0b, 3	; 11
 93c:	8a e1       	ldi	r24, 0x1A	; 26
 93e:	8a 95       	dec	r24
 940:	f1 f7       	brne	.-4      	; 0x93e <TM1637_stop+0x4>
 942:	00 c0       	rjmp	.+0      	; 0x944 <TM1637_stop+0xa>
 944:	5c 98       	cbi	0x0b, 4	; 11
 946:	8a e1       	ldi	r24, 0x1A	; 26
 948:	8a 95       	dec	r24
 94a:	f1 f7       	brne	.-4      	; 0x948 <TM1637_stop+0xe>
 94c:	00 c0       	rjmp	.+0      	; 0x94e <TM1637_stop+0x14>
 94e:	5b 9a       	sbi	0x0b, 3	; 11
 950:	8a e1       	ldi	r24, 0x1A	; 26
 952:	8a 95       	dec	r24
 954:	f1 f7       	brne	.-4      	; 0x952 <TM1637_stop+0x18>
 956:	00 c0       	rjmp	.+0      	; 0x958 <TM1637_stop+0x1e>
 958:	5c 9a       	sbi	0x0b, 4	; 11
 95a:	08 95       	ret

0000095c <TM1637_write_byte>:
 95c:	98 e0       	ldi	r25, 0x08	; 8
 95e:	5b 98       	cbi	0x0b, 3	; 11
 960:	2a e1       	ldi	r18, 0x1A	; 26
 962:	2a 95       	dec	r18
 964:	f1 f7       	brne	.-4      	; 0x962 <TM1637_write_byte+0x6>
 966:	00 c0       	rjmp	.+0      	; 0x968 <TM1637_write_byte+0xc>
 968:	80 ff       	sbrs	r24, 0
 96a:	02 c0       	rjmp	.+4      	; 0x970 <TM1637_write_byte+0x14>
 96c:	5c 9a       	sbi	0x0b, 4	; 11
 96e:	01 c0       	rjmp	.+2      	; 0x972 <TM1637_write_byte+0x16>
 970:	5c 98       	cbi	0x0b, 4	; 11
 972:	5b 9a       	sbi	0x0b, 3	; 11
 974:	2a e1       	ldi	r18, 0x1A	; 26
 976:	2a 95       	dec	r18
 978:	f1 f7       	brne	.-4      	; 0x976 <TM1637_write_byte+0x1a>
 97a:	00 c0       	rjmp	.+0      	; 0x97c <TM1637_write_byte+0x20>
 97c:	86 95       	lsr	r24
 97e:	91 50       	subi	r25, 0x01	; 1
 980:	71 f7       	brne	.-36     	; 0x95e <TM1637_write_byte+0x2>
 982:	5b 98       	cbi	0x0b, 3	; 11
 984:	54 98       	cbi	0x0a, 4	; 10
 986:	5c 9a       	sbi	0x0b, 4	; 11
 988:	8a e1       	ldi	r24, 0x1A	; 26
 98a:	8a 95       	dec	r24
 98c:	f1 f7       	brne	.-4      	; 0x98a <TM1637_write_byte+0x2e>
 98e:	00 c0       	rjmp	.+0      	; 0x990 <TM1637_write_byte+0x34>
 990:	29 b1       	in	r18, 0x09	; 9
 992:	20 71       	andi	r18, 0x10	; 16
 994:	30 e0       	ldi	r19, 0x00	; 0
 996:	81 e0       	ldi	r24, 0x01	; 1
 998:	12 16       	cp	r1, r18
 99a:	13 06       	cpc	r1, r19
 99c:	0c f0       	brlt	.+2      	; 0x9a0 <TM1637_write_byte+0x44>
 99e:	80 e0       	ldi	r24, 0x00	; 0
 9a0:	12 16       	cp	r1, r18
 9a2:	13 06       	cpc	r1, r19
 9a4:	14 f4       	brge	.+4      	; 0x9aa <TM1637_write_byte+0x4e>
 9a6:	54 9a       	sbi	0x0a, 4	; 10
 9a8:	5c 98       	cbi	0x0b, 4	; 11
 9aa:	9a e1       	ldi	r25, 0x1A	; 26
 9ac:	9a 95       	dec	r25
 9ae:	f1 f7       	brne	.-4      	; 0x9ac <TM1637_write_byte+0x50>
 9b0:	00 c0       	rjmp	.+0      	; 0x9b2 <TM1637_write_byte+0x56>
 9b2:	5b 9a       	sbi	0x0b, 3	; 11
 9b4:	2a e1       	ldi	r18, 0x1A	; 26
 9b6:	2a 95       	dec	r18
 9b8:	f1 f7       	brne	.-4      	; 0x9b6 <TM1637_write_byte+0x5a>
 9ba:	00 c0       	rjmp	.+0      	; 0x9bc <TM1637_write_byte+0x60>
 9bc:	5b 98       	cbi	0x0b, 3	; 11
 9be:	9a e1       	ldi	r25, 0x1A	; 26
 9c0:	9a 95       	dec	r25
 9c2:	f1 f7       	brne	.-4      	; 0x9c0 <TM1637_write_byte+0x64>
 9c4:	00 c0       	rjmp	.+0      	; 0x9c6 <TM1637_write_byte+0x6a>
 9c6:	54 9a       	sbi	0x0a, 4	; 10
 9c8:	08 95       	ret

000009ca <TM1637_send_config>:
 9ca:	cf 93       	push	r28
 9cc:	81 11       	cpse	r24, r1
 9ce:	02 c0       	rjmp	.+4      	; 0x9d4 <TM1637_send_config+0xa>
 9d0:	c0 e0       	ldi	r28, 0x00	; 0
 9d2:	01 c0       	rjmp	.+2      	; 0x9d6 <TM1637_send_config+0xc>
 9d4:	c8 e0       	ldi	r28, 0x08	; 8
 9d6:	68 30       	cpi	r22, 0x08	; 8
 9d8:	08 f0       	brcs	.+2      	; 0x9dc <TM1637_send_config+0x12>
 9da:	67 e0       	ldi	r22, 0x07	; 7
 9dc:	c6 2b       	or	r28, r22
 9de:	c0 93 25 01 	sts	0x0125, r28	; 0x800125 <_config>
 9e2:	0e 94 95 04 	call	0x92a	; 0x92a <TM1637_start>
 9e6:	8c 2f       	mov	r24, r28
 9e8:	80 68       	ori	r24, 0x80	; 128
 9ea:	0e 94 ae 04 	call	0x95c	; 0x95c <TM1637_write_byte>
 9ee:	0e 94 9d 04 	call	0x93a	; 0x93a <TM1637_stop>
 9f2:	cf 91       	pop	r28
 9f4:	08 95       	ret

000009f6 <TM1637_init>:
 9f6:	9a b1       	in	r25, 0x0a	; 10
 9f8:	98 61       	ori	r25, 0x18	; 24
 9fa:	9a b9       	out	0x0a, r25	; 10
 9fc:	9b b1       	in	r25, 0x0b	; 11
 9fe:	97 7e       	andi	r25, 0xE7	; 231
 a00:	9b b9       	out	0x0b, r25	; 11
 a02:	0e 94 e5 04 	call	0x9ca	; 0x9ca <TM1637_send_config>
 a06:	08 95       	ret

00000a08 <TM1637_display_segments>:
 a08:	cf 93       	push	r28
 a0a:	df 93       	push	r29
 a0c:	c8 2f       	mov	r28, r24
 a0e:	d6 2f       	mov	r29, r22
 a10:	0e 94 95 04 	call	0x92a	; 0x92a <TM1637_start>
 a14:	84 e4       	ldi	r24, 0x44	; 68
 a16:	0e 94 ae 04 	call	0x95c	; 0x95c <TM1637_write_byte>
 a1a:	0e 94 9d 04 	call	0x93a	; 0x93a <TM1637_stop>
 a1e:	0e 94 95 04 	call	0x92a	; 0x92a <TM1637_start>
 a22:	8c 2f       	mov	r24, r28
 a24:	83 70       	andi	r24, 0x03	; 3
 a26:	80 6c       	ori	r24, 0xC0	; 192
 a28:	0e 94 ae 04 	call	0x95c	; 0x95c <TM1637_write_byte>
 a2c:	8d 2f       	mov	r24, r29
 a2e:	0e 94 ae 04 	call	0x95c	; 0x95c <TM1637_write_byte>
 a32:	0e 94 9d 04 	call	0x93a	; 0x93a <TM1637_stop>
 a36:	df 91       	pop	r29
 a38:	cf 91       	pop	r28
 a3a:	08 95       	ret

00000a3c <TM1637_display_digit>:
 a3c:	6a 30       	cpi	r22, 0x0A	; 10
 a3e:	30 f4       	brcc	.+12     	; 0xa4c <TM1637_display_digit+0x10>
 a40:	e6 2f       	mov	r30, r22
 a42:	f0 e0       	ldi	r31, 0x00	; 0
 a44:	e8 59       	subi	r30, 0x98	; 152
 a46:	ff 4f       	sbci	r31, 0xFF	; 255
 a48:	64 91       	lpm	r22, Z
 a4a:	01 c0       	rjmp	.+2      	; 0xa4e <TM1637_display_digit+0x12>
 a4c:	60 e0       	ldi	r22, 0x00	; 0
 a4e:	81 30       	cpi	r24, 0x01	; 1
 a50:	31 f4       	brne	.+12     	; 0xa5e <TM1637_display_digit+0x22>
 a52:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <_segments>
 a56:	90 78       	andi	r25, 0x80	; 128
 a58:	69 2b       	or	r22, r25
 a5a:	60 93 24 01 	sts	0x0124, r22	; 0x800124 <_segments>
 a5e:	0e 94 04 05 	call	0xa08	; 0xa08 <TM1637_display_segments>
 a62:	08 95       	ret

00000a64 <uart_init>:
}
void uart_init(int baud_rate){
	
	//int value =     ((freq)/(16*baud_rate)) - 1;
	int value = 103;
	UBRR0H = (value>>8);
 a64:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
	UBRR0L = (value);
 a68:	87 e6       	ldi	r24, 0x67	; 103
 a6a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
	
	UCSR0C = 0x06;       /* Set frame format: 8data, 1stop bit  */
 a6e:	86 e0       	ldi	r24, 0x06	; 6
 a70:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
	UCSR0B = (1<<TXEN0) | (1<<RXCIE0) | (1<<RXEN0); /* Enable  transmitter                 */
 a74:	88 e9       	ldi	r24, 0x98	; 152
 a76:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
 a7a:	08 95       	ret

00000a7c <__udivmodhi4>:
 a7c:	aa 1b       	sub	r26, r26
 a7e:	bb 1b       	sub	r27, r27
 a80:	51 e1       	ldi	r21, 0x11	; 17
 a82:	07 c0       	rjmp	.+14     	; 0xa92 <__udivmodhi4_ep>

00000a84 <__udivmodhi4_loop>:
 a84:	aa 1f       	adc	r26, r26
 a86:	bb 1f       	adc	r27, r27
 a88:	a6 17       	cp	r26, r22
 a8a:	b7 07       	cpc	r27, r23
 a8c:	10 f0       	brcs	.+4      	; 0xa92 <__udivmodhi4_ep>
 a8e:	a6 1b       	sub	r26, r22
 a90:	b7 0b       	sbc	r27, r23

00000a92 <__udivmodhi4_ep>:
 a92:	88 1f       	adc	r24, r24
 a94:	99 1f       	adc	r25, r25
 a96:	5a 95       	dec	r21
 a98:	a9 f7       	brne	.-22     	; 0xa84 <__udivmodhi4_loop>
 a9a:	80 95       	com	r24
 a9c:	90 95       	com	r25
 a9e:	bc 01       	movw	r22, r24
 aa0:	cd 01       	movw	r24, r26
 aa2:	08 95       	ret

00000aa4 <__divmodhi4>:
 aa4:	97 fb       	bst	r25, 7
 aa6:	07 2e       	mov	r0, r23
 aa8:	16 f4       	brtc	.+4      	; 0xaae <__divmodhi4+0xa>
 aaa:	00 94       	com	r0
 aac:	07 d0       	rcall	.+14     	; 0xabc <__divmodhi4_neg1>
 aae:	77 fd       	sbrc	r23, 7
 ab0:	09 d0       	rcall	.+18     	; 0xac4 <__divmodhi4_neg2>
 ab2:	0e 94 3e 05 	call	0xa7c	; 0xa7c <__udivmodhi4>
 ab6:	07 fc       	sbrc	r0, 7
 ab8:	05 d0       	rcall	.+10     	; 0xac4 <__divmodhi4_neg2>
 aba:	3e f4       	brtc	.+14     	; 0xaca <__divmodhi4_exit>

00000abc <__divmodhi4_neg1>:
 abc:	90 95       	com	r25
 abe:	81 95       	neg	r24
 ac0:	9f 4f       	sbci	r25, 0xFF	; 255
 ac2:	08 95       	ret

00000ac4 <__divmodhi4_neg2>:
 ac4:	70 95       	com	r23
 ac6:	61 95       	neg	r22
 ac8:	7f 4f       	sbci	r23, 0xFF	; 255

00000aca <__divmodhi4_exit>:
 aca:	08 95       	ret

00000acc <strcat>:
 acc:	fb 01       	movw	r30, r22
 ace:	dc 01       	movw	r26, r24
 ad0:	0d 90       	ld	r0, X+
 ad2:	00 20       	and	r0, r0
 ad4:	e9 f7       	brne	.-6      	; 0xad0 <strcat+0x4>
 ad6:	11 97       	sbiw	r26, 0x01	; 1
 ad8:	01 90       	ld	r0, Z+
 ada:	0d 92       	st	X+, r0
 adc:	00 20       	and	r0, r0
 ade:	e1 f7       	brne	.-8      	; 0xad8 <strcat+0xc>
 ae0:	08 95       	ret

00000ae2 <strrev>:
 ae2:	dc 01       	movw	r26, r24
 ae4:	fc 01       	movw	r30, r24
 ae6:	67 2f       	mov	r22, r23
 ae8:	71 91       	ld	r23, Z+
 aea:	77 23       	and	r23, r23
 aec:	e1 f7       	brne	.-8      	; 0xae6 <strrev+0x4>
 aee:	32 97       	sbiw	r30, 0x02	; 2
 af0:	04 c0       	rjmp	.+8      	; 0xafa <strrev+0x18>
 af2:	7c 91       	ld	r23, X
 af4:	6d 93       	st	X+, r22
 af6:	70 83       	st	Z, r23
 af8:	62 91       	ld	r22, -Z
 afa:	ae 17       	cp	r26, r30
 afc:	bf 07       	cpc	r27, r31
 afe:	c8 f3       	brcs	.-14     	; 0xaf2 <strrev+0x10>
 b00:	08 95       	ret

00000b02 <__itoa_ncheck>:
 b02:	bb 27       	eor	r27, r27
 b04:	4a 30       	cpi	r20, 0x0A	; 10
 b06:	31 f4       	brne	.+12     	; 0xb14 <__itoa_ncheck+0x12>
 b08:	99 23       	and	r25, r25
 b0a:	22 f4       	brpl	.+8      	; 0xb14 <__itoa_ncheck+0x12>
 b0c:	bd e2       	ldi	r27, 0x2D	; 45
 b0e:	90 95       	com	r25
 b10:	81 95       	neg	r24
 b12:	9f 4f       	sbci	r25, 0xFF	; 255
 b14:	0c 94 8d 05 	jmp	0xb1a	; 0xb1a <__utoa_common>

00000b18 <__utoa_ncheck>:
 b18:	bb 27       	eor	r27, r27

00000b1a <__utoa_common>:
 b1a:	fb 01       	movw	r30, r22
 b1c:	55 27       	eor	r21, r21
 b1e:	aa 27       	eor	r26, r26
 b20:	88 0f       	add	r24, r24
 b22:	99 1f       	adc	r25, r25
 b24:	aa 1f       	adc	r26, r26
 b26:	a4 17       	cp	r26, r20
 b28:	10 f0       	brcs	.+4      	; 0xb2e <__utoa_common+0x14>
 b2a:	a4 1b       	sub	r26, r20
 b2c:	83 95       	inc	r24
 b2e:	50 51       	subi	r21, 0x10	; 16
 b30:	b9 f7       	brne	.-18     	; 0xb20 <__utoa_common+0x6>
 b32:	a0 5d       	subi	r26, 0xD0	; 208
 b34:	aa 33       	cpi	r26, 0x3A	; 58
 b36:	08 f0       	brcs	.+2      	; 0xb3a <__utoa_common+0x20>
 b38:	a9 5d       	subi	r26, 0xD9	; 217
 b3a:	a1 93       	st	Z+, r26
 b3c:	00 97       	sbiw	r24, 0x00	; 0
 b3e:	79 f7       	brne	.-34     	; 0xb1e <__utoa_common+0x4>
 b40:	b1 11       	cpse	r27, r1
 b42:	b1 93       	st	Z+, r27
 b44:	11 92       	st	Z+, r1
 b46:	cb 01       	movw	r24, r22
 b48:	0c 94 71 05 	jmp	0xae2	; 0xae2 <strrev>

00000b4c <_exit>:
 b4c:	f8 94       	cli

00000b4e <__stop_program>:
 b4e:	ff cf       	rjmp	.-2      	; 0xb4e <__stop_program>
